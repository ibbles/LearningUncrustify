# Function call formatting.
#nl_func_call_args           = false  # Add or remove newline after each ',' in a function call.
align_func_params           = true   # Whether to align variable definitions in prototypes and functions.
indent_func_call_param      = false  # Indent or align continued function call parameters.
indent_paren_nl             = true   # Indent next line with '('.

# Whether to add a newline after '(' in a function declaration if '(' and ')'
# are in different lines. If false, nl_func_decl_start is used instead.
nl_func_decl_start_multi_line = false  # true/false

# Add or remove newline after '(' in a function declaration.
nl_func_decl_start              = ignore   # ignore/add/remove/force/not_defined

# Overrides nl_func_decl_start when there is only one parameter.
nl_func_decl_start_single       = ignore   # ignore/add/remove/force/not_defined

# Whether to add a newline after '(' in a function definition if '(' and ')'
# are in different lines. If false, nl_func_def_start is used instead.
nl_func_def_start_multi_line = false  # true/false

# Add or remove newline after each ',' in a function declaration.
nl_func_decl_args = ignore  # ignore/add/remove/force/not_defined

# Add or remove newline after each ',' in a function definition.
nl_func_def_args = ignore  # ignore/add/remove/force/not_defined

# Add or remove newline after each ',' in a function call.
nl_func_call_args = ignore  # ignore/add/remove/force/not_defined

# Whether to add a newline after each ',' in a function declaration if '('
# and ')' are in different lines. If false, nl_func_decl_args is used instead.
nl_func_decl_args_multi_line = false  # true/false

# Whether to add a newline after each ',' in a function definition if '('
# and ')' are in different lines. If false, nl_func_def_args is used instead.
nl_func_def_args_multi_line = false  # true/false

# Add or remove newline before the ')' in a function declaration.
nl_func_decl_end = ignore  # ignore/add/remove/force/not_defined

# Add or remove newline before the ')' in a function definition.
nl_func_def_end = ignore  # ignore/add/remove/force/not_defined

# Overrides nl_func_decl_end when there is only one parameter.
nl_func_decl_end_single = ignore  # ignore/add/remove/force/not_defined

# Overrides nl_func_def_end when there is only one parameter.
nl_func_def_end_single = ignore  # ignore/add/remove/force/not_defined

# Whether to add a newline before ')' in a function declaration if '(' and ')'
# are in different lines. If false, nl_func_decl_end is used instead.
nl_func_decl_end_multi_line = false  # true/false

# Whether to add a newline before ')' in a function definition if '(' and ')'
# are in different lines. If false, nl_func_def_end is used instead.
nl_func_def_end_multi_line = false  # true/false

# Whether to add a newline after '(' in a function call if '(' and ')' are in
# different lines.
nl_func_call_start_multi_line = false  # true/false

# Whether to add a newline after each ',' in a function call if '(' and ')'
# are in different lines.
nl_func_call_args_multi_line = false  # true/false

# Whether to add a newline before ')' in a function call if '(' and ')' are in
# different lines.
nl_func_call_end_multi_line = false  # true/false

# Whether to fully split long function prototypes/calls at commas.
# The option ls_code_width has priority over the option ls_func_split_full.
ls_func_split_full = false  # true/false


# .Optional cleanups.
sp_inside_paren             = remove          # remove space inside ( )

# How to reflow comments.
#
# 0: No reflowing (apart from the line wrapping due to cmt_width) (default)
# 1: No touching at all
# 2: Full reflow (enable cmt_indent_multi for indent with line wrapping due to cmt_width)
cmt_reflow_mode = 1  # unsigned number

# Whether to apply changes to multi-line comments, including cmt_width,
# keyword substitution and leading chars.
#
# Default: true
#
# Documentation comments should not be indeted.
# This should be set to 'false'.
cmt_indent_multi = false  # true/false

# Whether to indent the body of a 'namespace'.
indent_namespace = true  # true/false






#
# Default setting overrides.
#





# Base indentation.
input_tab_size              = 2
output_tab_size             = 2
indent_columns              = 2
indent_with_tabs            = 0

# Class formatting.
indent_class                = true
indent_access_spec          = 1
indent_access_spec_body     = true

# Bracing style.
nl_class_brace              = force
nl_fdef_brace               = force

# Code width threshold.
code_width                  = 100

